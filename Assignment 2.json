{
  "metadata": {
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    },
    "kernelspec": {
      "name": "python",
      "display_name": "Python (Pyodide)",
      "language": "python"
    }
  },
  "nbformat_minor": 4,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "code",
      "source": "import regex as re",
      "metadata": {
        "trusted": true
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "#Assignment 2 \n#Question 1 - write a regex pattern in python program to check that string contains only a set of charactersin this case a-z,A-Z,0-9)\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "def is_allowed_specific_char(string):\n    string_re = re.compile(r'[^a-zA-Z0-9.]')\n    string = string_re.search(string)\n    return not bool(string)\n\nprint(is_allowed_specific_char(\"ABCDEFabcdef123450\")) \nprint(is_allowed_specific_char(\"*&%@#!}{\"))",
      "metadata": {
        "trusted": true
      },
      "execution_count": 7,
      "outputs": [
        {
          "name": "stdout",
          "text": "True\nFalse\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "#Question2 Write a RegEx pattern that matches a string that has an a followed by zero or more b's",
      "metadata": {
        "trusted": true
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "def text_match(text):\n        pattern = 'ab*?'\n        if re.search(pattern,  text):\n                return 'match'\n        else:\n                return('Not matched!')\n\nprint(text_match(\"abcc\"))\nprint(text_match(\"abc\"))\nprint(text_match(\"abbc\"))",
      "metadata": {
        "trusted": true
      },
      "execution_count": 25,
      "outputs": [
        {
          "name": "stdout",
          "text": "match\nmatch\nmatch\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "#Question 3-  Write a RegEx pattern that matches a string that has an a followed by one or more b's.",
      "metadata": {
        "trusted": true
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "def text_match(text):\n        pattern = 'ab+?'\n        if re.search(pattern,  text):\n                return 'match'\n        else:\n                return('Not matched!')\n\nprint(text_match(\"abcd\"))\nprint(text_match(\"abc\"))",
      "metadata": {
        "trusted": true
      },
      "execution_count": 24,
      "outputs": [
        {
          "name": "stdout",
          "text": "match\nmatch\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "#Question 4- Write a RegEx pattern that matches a string that has an a followed by zero or one 'b'.",
      "metadata": {
        "trusted": true
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "def text_match(text):\n        patterns = 'ab?'\n        if re.search(patterns,  text):\n                return 'match'\n        else:\n                return('Not matched!')\n\nprint(text_match(\"ab\"))\nprint(text_match(\"abc\"))",
      "metadata": {
        "trusted": true
      },
      "execution_count": 23,
      "outputs": [
        {
          "name": "stdout",
          "text": "match\nmatch\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "#Question 5- Write a RegEx pattern in python program that matches a string that has an a followed by three 'b'.",
      "metadata": {
        "trusted": true
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "def text_match(text):\n        pattern = 'ab{3}?'\n        if re.search(pattern,  text):\n                return 'match'\n        else:\n                return('Not matched!')\n\nprint(text_match(\"abbbcccb\"))\nprint(text_match(\"aabbbbbc\"))",
      "metadata": {
        "trusted": true
      },
      "execution_count": 27,
      "outputs": [
        {
          "name": "stdout",
          "text": "match\nmatch\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "#Question 6- Write a RegEx pattern in python program that matches a string that has an a followed by two to three 'b'.",
      "metadata": {
        "trusted": true
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "def text_match(text):\n        patterns = 'ab{2,3}?'\n        if re.search(patterns,  text):\n                return 'match!'\n        else:\n                return('Not matched!')\n\nprint(text_match(\"abcdcc\"))\nprint(text_match(\"aabbbbbc\"))",
      "metadata": {
        "trusted": true
      },
      "execution_count": 29,
      "outputs": [
        {
          "name": "stdout",
          "text": "Not matched!\nmatch!\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "#Question 7- Write a Python program that matches a string that has an 'a' followed by anything, ending in 'b'.",
      "metadata": {
        "trusted": true
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "def text_match(text):\n        patterns = 'a.*?b$'\n        if re.search(patterns,  text):\n                return 'match!'\n        else:\n                return('Not matched!')\n\nprint(text_match(\"abbd\"))\nprint(text_match(\"aabbbc\"))\nprint(text_match(\"accdjjjb\"))",
      "metadata": {
        "trusted": true
      },
      "execution_count": 31,
      "outputs": [
        {
          "name": "stdout",
          "text": "Not matched!\nNot matched!\nmatch!\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "#Question 8- Write a RegEx pattern in python program that matches a word at the beginning of a string.",
      "metadata": {
        "trusted": true
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "def text_match(text):\n        patterns = '^\\w+'\n        if re.search(patterns,  text):\n                return ' match!'\n        else:\n                return('Not matched!')\n\nprint(text_match(\"Dr apj abdul kalam was a great scientist.\"))\nprint(text_match(\"Dr apj abdul kalam was a great scientist.\"))",
      "metadata": {
        "trusted": true
      },
      "execution_count": 38,
      "outputs": [
        {
          "name": "stdout",
          "text": " match!\n match!\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "#Question 9- Write a RegEx pattern in python program that matches a word at the end of a string.",
      "metadata": {
        "trusted": true
      },
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "def text_match(text):\n        patterns = '\\w+\\S*$'\n        if re.search(patterns,  text):\n                return ' match!'\n        else:\n                return('Not matched!')\n\nprint(text_match(\"Dr apj abdul kalam was a great scientis.\"))\nprint(text_match(\"Dr apj abdul kalam was a great scientis. \"))",
      "metadata": {
        "trusted": true
      },
      "execution_count": 40,
      "outputs": [
        {
          "name": "stdout",
          "text": " match!\nNot matched!\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    }
  ]
}